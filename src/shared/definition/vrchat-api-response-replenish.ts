/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {Response}
   * @memberof ErrorResponse
   */
  error?: Response
}

/**
 * Platform types supported by VRChat
 * @export
 * @enum {string}
 */
export const Platform = {
  Unknown: '',
  UnknownPlatform: 'unknownplatform',
  Standalonewindows: 'standalonewindows',
  Android: 'android',
  Web: 'web'
} as const

export type Platform = (typeof Platform)[keyof typeof Platform]

/**
 * Types of two-factor authentication.
 * - `emailOtp`: Email-based one-time password.
 * - `totp`: Time-based one-time password, typically generated by an authenticator app.
 * - `otp`: One-time password, which can be used for various authentication methods.
 * @export
 * @enum {string}
 */
export type TwoFactorTypes = 'emailOtp' | 'totp' | 'otp'

/**
 * Base interface for notification version 2 objects.
 * Untested!, but should be compatible with the current API.
 * @export
 * @interface NotificationV2Base
 */
export interface NotificationV2Base {
  /**
   * Indicates whether the notification can be deleted by the user.
   * @type {boolean}
   * @memberof NotificationV2Base
   */
  canDelete?: boolean

  /**
   * @type {string}
   * @memberof NotificationV2Base
   */
  createdAt: string

  /**
   * @type {string}
   * @memberof NotificationV2Base
   */
  expiresAt?: string

  /**
   * @type {string}
   * @memberof NotificationV2Base
   */
  expiresIn?: string

  /**
   * Number of seconds after the notification is seen before it expires.
   * @type {number}
   * @memberof NotificationV2Base
   */
  expiryAfterSeen?: number

  /**
   * Unique identifier for the notification.
   * @type {string}
   * @memberof NotificationV2Base
   */
  id: string

  /**
   * Whether this notification should ignore Do Not Disturb settings.
   * @type {boolean}
   * @memberof NotificationV2Base
   */
  ignoreDND: boolean

  /**
   * URL of the image to display with the notification.
   * @type {string}
   * @memberof NotificationV2Base
   */
  imageUrl?: string

  /**
   * Indicates if this is a system-generated notification.
   * @type {boolean}
   * @memberof NotificationV2Base
   */
  isSystem: boolean

  /**
   * URL that the notification should link to when clicked.
   * @type {string}
   * @memberof NotificationV2Base
   */
  link: string

  /**
   * Display text for the notification link.
   * @type {string}
   * @memberof NotificationV2Base
   */
  linkText?: string

  /**
   * Internationalization key for the link text, null if using literal text.
   * @type {string | null}
   * @memberof NotificationV2Base
   */
  linkTextKey?: string

  /**
   * The main message content of the notification.
   * @type {string}
   * @memberof NotificationV2Base
   */
  message: string

  /**
   * Internationalization key for the message, null if using literal text.
   * @type {string | null}
   * @memberof NotificationV2Base
   */
  messageKey?: string

  /**
   * User ID of the notification recipient.
   * @type {string}
   * @memberof NotificationV2Base
   */
  receiverUserId: string

  /**
   * ID linking related notifications together.
   * @type {string}
   * @memberof NotificationV2Base
   */
  relatedNotificationsId?: string

  /**
   * Whether the notification requires the user to mark it as seen.
   * @type {boolean}
   * @memberof NotificationV2Base
   */
  requireSeen?: boolean

  /**
   * Whether the notification has been seen by the recipient.
   * @type {boolean}
   * @memberof NotificationV2Base
   */
  seen?: boolean

  /**
   * User ID of the notification sender, null for system notifications.
   * @type {string}
   * @memberof NotificationV2Base
   */
  senderUserId?: string

  /**
   * Username of the notification sender, null for system notifications.
   * @type {string}
   * @memberof NotificationV2Base
   * @deprecated
   */
  senderUsername?: string

  /**
   * The title/subject of the notification.
   * @type {string}
   * @memberof NotificationV2Base
   */
  title: string

  /**
   * Internationalization key for the title, null if using literal text.
   * @type {string}
   * @memberof NotificationV2Base
   */
  titleKey?: string

  /**
   * @type {string}
   * @memberof NotificationV2Base
   */
  updatedAt: string

  /**
   * Version number for the notification schema/structure.
   * @type {number}
   * @memberof NotificationV2Base
   */
  version: number

  /**
   * The type/category of the notification.
   * @type {NotificationV2Type}
   * @memberof NotificationV2Base
   */
  type: NotificationV2Type
}

/**
 * @export
 * @interface NotificationV2GroupAnnouncement
 */
export interface NotificationV2GroupAnnouncement {
  category?: NotificationV2GroupCategory
  data: NotificationV2DataGroupAnnouncement
  responses?: NotificationV2Responses[]
  type: typeof NotificationV2Type.GroupAnnouncement
}

/**
 * @export
 * @interface NotificationV2GroupJoinRequest
 */
export interface NotificationV2GroupJoinRequest {
  category?: NotificationV2GroupCategory
  data: NotificationV2DataGroupJoinRequest
  responses?: NotificationV2Responses[]
  type: typeof NotificationV2Type.GroupJoinRequest
}

/**
 * @export
 * @interface NotificationV2GrouInvite
 */
export interface NotificationV2GroupInvite {
  category?: NotificationV2GroupCategory
  data: NotificationV2DataGroupInvite
  responses?: NotificationV2Responses[]
  type: typeof NotificationV2Type.GroupInvite
}

/**
 * @export
 * @interface NotificationV2GroupInformative
 */
export interface NotificationV2GroupInformative {
  category?: NotificationV2GroupCategory
  data: unknown
  responses?: NotificationV2Responses[]
  type: typeof NotificationV2Type.GroupInformative
}

/**
 *
 * @export
 * @enum {string}
 */

export type NotificationV2 = NotificationV2Base &
  (
    | NotificationV2GroupAnnouncement
    | NotificationV2GroupJoinRequest
    | NotificationV2GroupInvite
    | NotificationV2GroupInformative
  )

/**
 *
 * @export
 * @enum {string}
 */

export const NotificationV2GroupCategory = {
  SoocialGroup: 'social.group'
} as const

export type NotificationV2GroupCategory =
  (typeof NotificationV2GroupCategory)[keyof typeof NotificationV2GroupCategory]

/**
 *
 * @export
 * @enum {string}
 */

export const NotificationV2Type = {
  GroupAnnouncement: 'group.announcement',
  GroupInvite: 'group.invite',
  GroupInformative: 'group.informative',
  GroupJoinRequest: 'group.joinRequest'
} as const

export type NotificationV2Type = (typeof NotificationV2Type)[keyof typeof NotificationV2Type]

/**
 *
 * @export
 * @enum {string}
 */

/**
 * Notification data structure for group announcement events in version 2.
 * @export
 * @interface NotificationV2DataGroupAnnouncement
 * @description Contains information about a group announcement notification, including
 * the announcement details and associated group information.
 */
export interface NotificationV2DataGroupAnnouncement {
  /**
   * @type {string}
   * @memberof NotificationV2DataGroupAnnouncement
   */
  announcementTitle: string
  /**
   * @type {string}
   * @memberof NotificationV2DataGroupAnnouncement
   */
  groupId: string
  /**
   * @type {string}
   * @memberof NotificationV2DataGroupAnnouncement
   */
  groupName: string
}

/**
 * Notification data structure for group invitation events in version 2.
 * @export
 * @interface NotificationV2DataGroupInvite
 * @description Contains information about a group invitation notification, including
 * the group details and the manager who sent the invitation.
 */
export interface NotificationV2DataGroupInvite {
  /**
   * The name of the group that the user is being invited to join.
   * @type {string}
   * @memberof NotificationV2DataGroupInvite
   */
  groupName: string
  /**
   * The display name of the group manager who sent the invitation.
   * @type {string}
   * @memberof NotificationV2DataGroupInvite
   */
  manageruserDisplayName: string
}

/**
 * Notification data structure for group join request events in version 2.
 * @export
 * @interface NotificationV2DataGroupJoinRequest
 * @description Contains information about a group join request notification, including
 * the requesting user's details and the target group information.
 */
export interface NotificationV2DataGroupJoinRequest {
  /**
   * The display name of the user who is requesting to join the group.
   * @type {string}
   * @memberof NotificationV2DataGroupJoinRequest
   */
  userDisplayName: string
  /**
   * The name of the group that the user wants to join.
   * @type {string}
   * @memberof NotificationV2DataGroupJoinRequest
   */
  groupName: string
}

/**
 *
 * @export
 * @enum {string}
 */

export const NotificationV2ResponseType = {
  Accept: 'accept',
  Unsubscribe: 'unsubscribe',
  Delete: 'delete',
  Decline: 'decline',
  Block: 'block',
  Reject: 'reject'
} as const

export type NotificationV2ResponseType =
  (typeof NotificationV2ResponseType)[keyof typeof NotificationV2ResponseType]

/**
 *
 * @export
 * @enum {string}
 */

export const NotificationV2ResponseIcon = {
  Check: 'check',
  BellSlash: 'bell-slash'
} as const

export type NotificationV2ResponseIcon =
  (typeof NotificationV2ResponseIcon)[keyof typeof NotificationV2ResponseIcon]

/**
 * Represents a response to a notification in version 2 of the notification system.
 * @export
 * @interface NotificationV2Responses
 */
export interface NotificationV2Responses {
  /**
   * @type {string}
   * @memberof NotificationV2Responses
   */
  data: string
  /**
   * @type {NotificationV2ResponseIcon}
   * @memberof NotificationV2Responses
   */
  icon: NotificationV2ResponseIcon
  /**
   * @type {string}
   * @memberof NotificationV2Responses
   */
  text: string
  /**
   * @type {string | null}
   * @memberof NotificationV2Responses
   */
  textKey: string | null
  /**
   * @type {NotificationV2ResponseType}
   * @memberof NotificationV2Responses
   */
  type: NotificationV2ResponseType
}
